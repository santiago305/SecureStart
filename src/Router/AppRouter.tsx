import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { Suspense, lazy } from "react";
import { useAuth } from "@/hooks/useAuth";

// 游닍 Carga din치mica de m칩dulos completos
const PublicRoutes = lazy(() => import("./modules/PublicRoutes"));
const AuthRoutes = lazy(() => import("./modules/AuthRoutes"));
const DashboardRoutes = lazy(() => import("./modules/DashboardRoutes"));
const ClientRoutes = lazy(() => import("./modules/ClientRoutes"));

/**
 * AppRouter maneja las rutas de la aplicaci칩n, cargando m칩dulos de forma condicional
 * para optimizar el rendimiento y aplicar las restricciones de acceso correspondientes.
 */
export default function AppRouter() {
  const { isAuthenticated, userRole, hasClient } = useAuth();

  return (
    <Router>
      <Suspense fallback={<div className="text-white p-4">Cargando p치gina...</div>}>
        <Routes>
          {/* 游닀 Rutas p칰blicas (siempre disponibles) */}
          <Route path="/*" element={<PublicRoutes />} />

          {/* 游댏 Rutas de autenticaci칩n (solo si NO est치 autenticado) */}
          {!isAuthenticated && (
            <Route path="/*" element={<AuthRoutes />} />
          )}

          {/* 游녻 Rutas para completar registro de cliente (si es user y no tiene cliente) */}
          {isAuthenticated && userRole === "user" && hasClient === false && (
            <Route path="/*" element={<ClientRoutes />} />
          )}

          {/* 游늵 Rutas de Dashboard (solo si est치 autenticado) */}
          {isAuthenticated && (
            <Route path="/*" element={<DashboardRoutes />} />
          )}
        </Routes>
      </Suspense>
    </Router>
  );
}
